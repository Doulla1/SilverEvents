// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id         Int      @id @default(autoincrement())
  role_name  String   @unique
  users      User[]   @relation("UserRole")

  @@map("roles")
}

model User {
  id             Int               @id @default(autoincrement())
  first_name     String
  last_name      String
  email          String            @unique
  password       String
  position       String
  profile_photo  String?
  role_id        Int
  role           Role              @relation("UserRole", fields: [role_id], references: [id])
  events         Event[]           @relation("UserEvents")
  registrations  EventRegistration[] @relation("UserRegistrations")
  sessions       Session[]         @relation("UserSessions")
  passwordResets PasswordReset[]   @relation("UserPasswordResets")

  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@map("users")
}

model Session {
  id             Int      @id @default(autoincrement())
  user_id        Int
  session_token  String   @unique
  expires        DateTime

  user           User     @relation("UserSessions", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordReset {
  id            Int       @id @default(autoincrement())
  user_id       Int
  token         String    @unique
  expires_at    DateTime
  user          User      @relation("UserPasswordResets", fields: [user_id], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())

  @@map("password_resets")
}

model Event {
  id             Int                 @id @default(autoincrement())
  title          String
  description    String?
  start_date     DateTime
  end_date       DateTime
  location       String
  cover_image    String?
  created_by     Int
  creator        User                @relation("UserEvents", fields: [created_by], references: [id], onDelete: Cascade)
  registrations  EventRegistration[] @relation("EventRegistrations")

  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@map("events")
}

model EventRegistration {
  id                Int       @id @default(autoincrement())
  event_id          Int
  user_id           Int
  registration_date DateTime  @default(now())

  event             Event     @relation("EventRegistrations", fields: [event_id], references: [id], onDelete: Cascade)
  user              User      @relation("UserRegistrations", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("event_registrations")
}
